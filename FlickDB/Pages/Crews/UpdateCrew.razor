@page "/updatecrew/{MovieId:int}/{CrewId:int}"

@inject CrewForm CrewForm
@inject IDbContextFactory<MovieContext> DbFactory
@inject NavigationManager NavManager

@using FlickDB.Services;

<div class="container my-5">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-sm">
        <div class="col-lg-12 p-3 p-lg-5 pt-lg-3" style="border: 2px solid #000">
            <h1 class="display-4 fw-bold lh-1 text-body-emphasis">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-film" viewBox="0 0 16 16">
                <path d="M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0v6h8V1H4zm8 8H4v6h8V9zM1 1v2h2V1H1zm2 3H1v2h2V4zM1 7v2h2V7H1zm2 3H1v2h2v-2zm-2 3v2h2v-2H1zM15 1h-2v2h2V1zm-2 3v2h2V4h-2zm2 3h-2v2h2V7zm-2 3v2h2v-2h-2zm2 3h-2v2h2v-2z"/>
            </svg>
            Update a Crew</h1>
            <p class="lead">Update a Crew</p>
            <div class="container">
                <div class="row">
                    <form>
                        <EditForm Model="@CrewForm" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                            <DataAnnotationsValidator />

                            <div class="col-md-12">
                                <label for="firstname" class="form-label">Firstname</label>
                                <InputText id="firstname" type="text" class="form-control" @bind-Value=CrewForm.Firstname placeholder="Crew first name" />
                                <ValidationMessage For="() => CrewForm.Firstname" />
                            </div>

                            <div class="col-md-12">
                                <label for="lastname" class="form-label">Lastname</label>
                                <InputText id="lastname" type="text" class="form-control" @bind-Value=CrewForm.Lastname placeholder="Crew last name" />
                                <ValidationMessage For="() => CrewForm.Firstname" />
                            </div>

                            <div class="col-md-12">
                                <label for="birth" class="form-label">Birth</label>
                                <InputDate id="birth" class="form-control" @bind-Value=CrewForm.Birth />
                                <ValidationMessage For="() => CrewForm.Birth" />
                            </div>

                            <div class="col-md-6">
                                <label for="biography" class="form-label">Biography:</label>
                                <InputTextArea id="biography" class="form-control" @bind-Value=CrewForm.Biography />
                                <ValidationMessage For="() => CrewForm.Biography" />
                            </div>

                            <div class="col-md-12">
                                <label for="picture" class="form-label">Picture</label>
                                <InputText id="picture" type="text" class="form-control" @bind-Value=CrewForm.Picture placeholder="Crew picture" />
                                <ValidationMessage For="() => CrewForm.Picture" />
                            </div>

                            <div class="col-md-6">
                                <label for="position" class="form-label">Position</label>
                                <InputSelect id="position" class="form-control" aria-label="position" @bind-Value=CrewForm.Position placeholder="Position name" >
                                    <option value="@Crew?.Position">@Crew?.Position</option>
                                    <option value="Director">Director</option>
                                    <option value="Producer">Producer</option>
                                    <option value="Writer">Writer</option>
                                </InputSelect>
                                <ValidationMessage For="() => CrewForm.Position" />
                            </div>

                            <div class="col-12 p-2">
                                <input type="submit" class="btn btn-primary btn-md" value="Submit" />
                                <input type="button" class="btn btn-primary btn-md" @onclick="HandleCanceledSubmit" value="Cancel" />
                            </div>
                        </EditForm>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] 
    public int MovieId { get; set; }

    [Parameter]
    public int CrewId { get; set; }

    public Crew? Crew { get; set; }

    private bool IsValidSubmit { get; set; }

    public string MovieIsSubmitted => IsValidSubmit ? "Crew updated!" : "Crew update failed!";

    protected override async Task OnInitializedAsync()
    {
        DbCrewTable crewtable = new DbCrewTable(DbFactory);
        Crew = await crewtable.ReadSingleRecord(MovieId, CrewId);

        if (Crew != null)
        {
            CrewForm.Firstname = Crew?.Firstname ?? string.Empty;
            CrewForm.Lastname = Crew?.Lastname ?? string.Empty;
            CrewForm.Birth = Crew?.Birth.HasValue == true ? Crew.Birth.Value : DateOnly.MinValue;
            CrewForm.Biography = Crew?.Biography ?? string.Empty;
            CrewForm.Picture = Crew?.Picture ?? string.Empty;
            CrewForm.Position = Crew?.Position ?? string.Empty;
        }
        else
        {
            throw new FindArgumentNullException();
        }
    }

    private void HandleCanceledSubmit()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private async Task HandleValidSubmit()
    {
        IsValidSubmit = true;

        DbCrewTable crewtable = new DbCrewTable(DbFactory);
        bool isSuccess = await crewtable.UpdateRecord(CrewForm, CrewId);
        if (isSuccess)
        {
            NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
        }
        else
        {
            throw new UpdateArgumentNullException();
        }
    }

    private void HandleInvalidSubmit()
    {
        IsValidSubmit = false;
    }
}