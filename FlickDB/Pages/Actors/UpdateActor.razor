@page "/updatemovie/{MovieId:int}/{ActorId:int}"

@inject ActorForm ActorForm
@inject IDbContextFactory<MovieContext> DbFactory
@inject NavigationManager NavManager

@using FlickDB.Services;

<div class="container my-5">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-sm">
        <div class="col-lg-12 p-3 p-lg-5 pt-lg-3" style="border: 2px solid #000">
            <h1 class="display-4 fw-bold lh-1 text-body-emphasis">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-film" viewBox="0 0 16 16">
                <path d="M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0v6h8V1H4zm8 8H4v6h8V9zM1 1v2h2V1H1zm2 3H1v2h2V4zM1 7v2h2V7H1zm2 3H1v2h2v-2zm-2 3v2h2v-2H1zM15 1h-2v2h2V1zm-2 3v2h2V4h-2zm2 3h-2v2h2V7zm-2 3v2h2v-2h-2zm2 3h-2v2h2v-2z"/>
            </svg>
            Update an actor</h1>
            <p class="lead">Update an actor</p>
            <div class="container">
                <div class="row">
                    <form>
                        <EditForm Model="@ActorForm" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                            <DataAnnotationsValidator />

                            <div class="col-md-12">
                                <label for="firstname" class="form-label">Firstname</label>
                                <InputText id="firstname" type="text" class="form-control" @bind-Value=ActorForm.Firstname placeholder="Actor first name" />
                                <ValidationMessage For="() => ActorForm.Firstname" />
                            </div>

                            <div class="col-md-12">
                                <label for="lastname" class="form-label">Lastname</label>
                                <InputText id="lastname" type="text" class="form-control" @bind-Value=ActorForm.Lastname placeholder="Actor last name" />
                                <ValidationMessage For="() => ActorForm.Firstname" />
                            </div>

                            <div class="col-md-12">
                                <label for="birth" class="form-label">Birth:</label>
                                <InputDate id="birth" class="form-control" @bind-Value=ActorForm.Birth />
                                <ValidationMessage For="() => ActorForm.Birth" />
                            </div>

                            <div class="col-md-12">
                                <label for="picture" class="form-label">Picture</label>
                                <InputText id="picture" type="text" class="form-control" @bind-Value=ActorForm.Picture placeholder="Actor picture" />
                                <ValidationMessage For="() => ActorForm.Picture" />
                            </div>

                            <div class="col-md-12">
                                <label for="character" class="form-label">Character</label>
                                <InputText id="character" type="text" class="form-control" @bind-Value=ActorForm.Character placeholder="Character name" />
                                <ValidationMessage For="() => ActorForm.Character" />
                            </div>

                            <div class="col-12 p-2">
                                <input type="submit" class="btn btn-primary btn-lg" value="Submit" />
                                <input type="button" class="btn btn-primary btn-lg" @onclick="HandleCancel" value="Cancel" />
                            </div>
                        </EditForm>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int MovieId { get; set; }

    [Parameter]
    public int ActorId { get; set; }

    Actor? Actor { get; set; }

    private bool IsValidSubmit { get; set; }

    public string MovieIsSubmitted => IsValidSubmit ? "Actor updated!" : "Actor update failed!";

    protected override async Task OnInitializedAsync()
    {
        IActorManager actorManager = new ActorService(DbFactory);
        Actor = await actorManager.ReadActor(MovieId, ActorId);

        ActorForm.Firstname = Actor.Firstname;
        ActorForm.Lastname = Actor.Lastname;
        ActorForm.Birth = Actor.Birth.HasValue ? Actor.Birth.Value : DateOnly.MinValue;
        ActorForm.Picture = Actor.Picture;
        ActorForm.Character = Actor.Moviesactors.First().Character;
    }

    private void HandleCancel()
    {
        NavManager.NavigateTo("/");
    }

    private async Task HandleValidSubmit()
    {
        IsValidSubmit = true;

        IActorManager actorManager = new ActorService(DbFactory);
        bool isSuccess = await actorManager.UpdateActor(ActorForm, ActorId);
        if (isSuccess)
        {
            NavManager.NavigateTo("/");
        }
    }

    private void HandleInvalidSubmit()
    {
        IsValidSubmit = false;
    }
}