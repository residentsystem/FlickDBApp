@page "/ShowCrew"

@inject IDbContextFactory<MovieContext> DbFactory

@if (Crews != null)
{
  @foreach (var crew in Crews)
  {
    <div class="col-md-6">
        <div class="row g-0 border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
          <div class="col p-4 d-flex flex-column position-static">
            <strong class="d-inline-block mb-2 text-primary-emphasis">@crew.Firstname @crew.Lastname</strong>
            <h3 class="mb-0">@crew.Position</h3>
            <div class="mb-1 text-body-secondary">@crew.Birth</div>
            <p class="card-text mb-auto">This is a wider card with supporting text below as a natural lead-in to additional content.</p>
            <a href="#" class="icon-link gap-1 icon-link-hover stretched-link">Continue reading
              <svg class="bi"><use xlink:href="#chevron-right"/></svg>
            </a>
          </div>
          <div class="col-auto d-none d-lg-block">
            <svg class="bd-placeholder-img" width="200" height="250" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"/><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
          </div>
        </div>
    </div>
  }
}
else
{
  <p>Crews not found</p>
}

@code
{
    [Parameter]
    public int MovieId { get; set; }

    Movie? MovieCrew { get; set; }

    List<Crew> Crews { get; set; } = new List<Crew>();

    protected override async Task OnInitializedAsync()
    {
      using (var db = DbFactory.CreateDbContext())
      {
        if (db.Movies != null)
        {
          MovieCrew = await db.Movies.Include(mc => mc.Moviescrews).ThenInclude(c => c.Crew).FirstOrDefaultAsync(m => m.Movieid == MovieId);
        }

        if (MovieCrew != null)
          Crews = await Task.FromResult(MovieCrew.Moviescrews.Select(c => c.Crew).ToList());
        
        db.Dispose();
      }
    }
}